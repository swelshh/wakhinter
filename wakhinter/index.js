 /**  * @fileOverview module to scan through all the js files in a project and send back an * array of errors for the first file found to have errors. *  * the main function to run is...  run() like this: * require("wakhinter").run(); * * @author Welsh Harris * @created 01/23/2014 */ /*global module*/var JSHINT = require("wakhinter/jshint").JSHINT,	_ = require("underscore"),	jsonMinify = require("wakhinter/json.minify"),	jshintOptions = {},	jshintGlobals = {},	jshintIgnore = {},	jsFiles = [],	skipFiles = [];//pull in the jshint options, globals, and stuff to ignorefunction loadOptions() {	"use strict";		var optionsText,		textStream,		ignoreText,		parentFolder;	//get the parent folder path	parentFolder = new File(module.filename).parent.path;		//yank in the jshint options	textStream = new TextStream(parentFolder + "jshintrc.json");	optionsText = textStream.read(0);	textStream.close();	optionsText = jsonMinify(optionsText);	jshintOptions = JSON.parse(optionsText);		//separate options and globals	jshintGlobals = _.clone(jshintOptions.globals);	jshintOptions = _.omit(jshintOptions, "globals");		//yank in stuff to ignore	textStream = new TextStream(parentFolder + "jshintignore.json");	ignoreText = textStream.read(0);	textStream.close();	ignoreText = jsonMinify(ignoreText);	jshintIgnore = JSON.parse(ignoreText);}//get the full path to all the .js files within a folderfunction getJsFilePathsForFolder(folder) {	"use strict";		folder.forEachFile(function(file) {		if (file.extension === "js") { 			jsFiles.push(file.path);		}	});  }//recusive function to get the full path to all the .js files within a folder and all its subfoldersfunction getJsFilePaths(mainFolder) {	"use strict";		getJsFilePathsForFolder(mainFolder);	mainFolder.forEachFolder(function(folder) {		getJsFilePaths(folder);	});		}//remove any files/paths specified to be skipped in jshintignore.jsonfunction removeSkipFiles() {	"use strict";	jsFiles = _.reject(jsFiles, function(filePath) {		var reject = false;				_.each(jshintIgnore.filePathContains, function(skipFile) {			if (filePath.indexOf(skipFile) !== -1) {				reject = true;			}		});				return reject;			});}//look through the errors returned by a call to jshint() and remove errors//we don't care about based on settings in jshintignore.jsonfunction removeSkipErrors(errors) {	"use strict";		errors = _.reject(errors, function(error) {		var reject = false;				//linesOfCode or stuff we specifically skipped with jshint_ignore (or jslint_ignore)		if (error === null) {			reject = true;		} else {			if (typeof error.evidence !== "undefined") {								//linesOfCode				if (jshintIgnore.linesOfCode.indexOf(error.evidence)!== -1) {					reject = true;				}								//jshint_ignore				if (error.evidence.indexOf("//jshint_ignore") !== -1) {					reject = true;				}								//jslint_ignore				if (error.evidence.indexOf("//jslint_ignore") !== -1) {					reject = true;				}			}		}		return reject;			});			return errors;}//update the format of a row of what we return when calling run()function reportRowFormatter(row) {	"use strict";	return _.pick(row, "reason", "line", "character", "evidence", "code");}//main method to run jshint on all the .js files in a folder and all its subfoldersexports.run = function(mainFolder) {	"use strict";		var textStream,		code = "",		errors = [],		i;			//if not passed a folder default to the project folder	if (typeof mainFolder === "undefined") {		mainFolder = getFolder();	} 			//get path to all our js files	jsFiles.length = 0;	getJsFilePaths(mainFolder); 	removeSkipFiles();	jsFiles.sort();		//jslint each file	for (i = 0; i < jsFiles.length; i++) {		textStream = new TextStream(jsFiles[i]);		code = textStream.read(0);		textStream.close();				JSHINT(code, jshintOptions, jshintGlobals);		errors = JSHINT.errors;		errors = removeSkipErrors(errors);		if (errors.length > 0) {//			errors = _.map(errors, function(error) {//				return _.pick(error, "reason", "line", "character", "evidence", "code");//			});			errors = _.map(errors, reportRowFormatter);			errors.unshift(jsFiles[i]); //put the path as the first elem of the errors array			break;		}	}	if (errors.length === 0) {		errors.push("Done!");	}	return errors;};//wakanda doesn't have bind() on the server so we need to add it because jshint uses it/* jshint ignore:start */if(!Function.prototype.bind) {	Function.prototype.bind = function (o /*, args */) {		var self = this, boundArgs = arguments;		return function() {			var args = [], i;			for (i = 1; i < boundArgs.length; i++) args.push(boundArgs[i]);			for (i = 0; i < arguments.length; i++) args.push(arguments[i]);			return self.apply(o, args);		}	};}/* jshint ignore:end *///load the jshint optionsloadOptions();